Programmer Documentation


Purpose: We would like to design an APP that helps people find carpool partners. Users can simply plug in their travel plan and get matched with another person with similar plan.


Data Structure:
  "requests" : {
    "requestId" : {
      "date" :
      "destination" :
      "distanceFromDest" :
      "distanceFromUser" :
      "endTime" :
      "isMatched" :
      "location" :
      "requestId" :
      "startTime" :
      "uId" :
    },
}


  "dates" : {
    "month" : {
      "date" : {
        "year" : {
          "requestId" :
        },
      },
    },
  },


  "users" : {
    "uId" : {
      "email" : ,
      "requests" : {
        "requestId" :
      }
    },
  }








Classes Structure: 


* Activities Package:
   * Main Activity
      * Responsible for the Sign In and Sign Up Page
      * Authentication for Facebook
   * History Activity
      * Displays the previous rides matched for the user in a recyclerview 
   * Map Activity
      * Generates a google map for the user
      * Using Autocomplete TextView to generate suggested location 
      * The blue dot is the User’s current location,  but the user can input a starting location that is different from their current location. The AutoComplete Text View was generated by the AutoComplete Adapter from Google’s documentation: https://github.com/mitchtabian/Google-Maps-Google-Places/blob/739015abf10ff8fab1bf9e6c899e4013c6fa051a/app/src/main/java/codingwithmitch/com/googlemapsgoogleplaces/MapActivity.java
      * The map is resized to display both the starting and ending location for the user  
   * Match Result Activity
      * A button is clicked on the Ride Request Activity that takes the user to this activity which contains a TextView stating whether there is a match or if the user has to wait 
      * Also contains two other buttons that 
   * Ride Request Activity:
      * The activity page that contains crucial information for being matched 
         * The time, date,  distance that the user can walk, and distance between users. The location is automatically generated from google maps 
   * BaseNav Drawer Activity:
      * This activity sets up the toolbar that displays users to navigate through different parts of the app. It is displayed in several 
   * History Activity: 
      * This retrieves data from FireBase to display a user’s previous matches and rides, or pending. 
* FirebaseDataBase Package:
   * When the user passes in the time, date, distance, it is sent to Firebase Database. This package contains the firebase classes that saves the user information and finds matches for users. 
   * the requests are added to the database and they contain the location time and and user constraints
   * when a match is found the these requests are iterated over and if one users' locations/destinations and constraints overlap with another users then a match is found


* GettersSettersAdapters Package: 
   * This contains a PlaceInformation class that gets the information like Name, Address, Latitude and Longitude of a place that is passed in. 
   * The Utility Function is used to get and put the Double value of the Latitude and Longitude when it is passed in for Shared Preferences. Shared Preferences takes in Into so this class was used to convert it. 


Testing: 
* Since most of the classes in our APP is Activities and others are non-trivial getters or setters, the testing was mostly done using the Emulator and the FireBase Console. Firstly, the console was used to determine whether the information that the user inputted was being passed. Additionally, we also had to write the algorithm whether the matches were being made or not. 




Features:
1. We utilized the google map and google places API as well as the GPS service to help our user locate their starting location as well as destination. We are able to display the map in our APP and deploy pin-points on the map. We also use the latitude and longitude from the location service to calculate the correlation of two requests. 
2. We can connect with Facebook,a prebuilt web service, to offer an alternative to our users. They can either sign-up by email or simply connect with Facebook.
3. We utilized Firebase for multiply cloud services. We use the firebase authentication to provide signup and signin functions for our users. We all so use firebase as an online database to store all our data. We designed our data structure to speed up the data searching process. The trade-off is a relatively larger data size to store, which is not a problem for firebase. 
4. We also designed a special algorithm for our matching process. We first select all the possible matchings that are within the parameters of our user. Then we calculate the best match considering both the time difference and the location difference. After the best match is sent to users via notification, we will wait for their confirmations. If one of them does not respond, the active user will be matched with the second best match. 














Sources Used:
* Google Documentation for Google Maps and Google Places API
   * https://developers.google.com/maps/
* Google documentation for AutoComplete Adapter: 
   * https://github.com/mitchtabian/Google-Maps-Google-Places/blob/739015abf10ff8fab1bf9e6c899e4013c6fa051a/app/src/main/java/codingwithmitch/com/googlemapsgoogleplaces/MapActivity.java
* Video tutorial for setting up the Google Maps: 
   * https://www.youtube.com/watch?v=OknMZUnTyds&list=PLgCYzUzKIBE-vInwQhGSdnbyJ62nixHCt
* StackOverFlow for Other errors